# Generated by Django 5.2.6 on 2025-09-18 15:28

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('rent', 'Rent'), ('utilities', 'Utilities'), ('groceries', 'Groceries'), ('supplies', 'Supplies'), ('maintenance', 'Maintenance'), ('internet', 'Internet'), ('other', 'Other')], default='other', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('split_type', models.CharField(choices=[('equal', 'Split Equally'), ('custom', 'Custom Split'), ('percentage', 'Percentage Split')], default='equal', max_length=20)),
                ('receipt_image', models.ImageField(blank=True, null=True, upload_to='expense_receipts/')),
                ('expense_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('paid_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paid_expenses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-expense_date'],
            },
        ),
        migrations.CreateModel(
            name='ExpenseSplit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_owed', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('is_settled', models.BooleanField(default=False)),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='splits', to='coliving.expense')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expense_splits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('expense', 'user')},
            },
        ),
        migrations.AddField(
            model_name='expense',
            name='participants',
            field=models.ManyToManyField(related_name='shared_expenses', through='coliving.ExpenseSplit', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='LivingSpace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('space_type', models.CharField(choices=[('apartment', 'Apartment'), ('house', 'House'), ('condo', 'Condo'), ('dorm', 'Dormitory'), ('other', 'Other')], default='apartment', max_length=20)),
                ('address', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_spaces', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HouseRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quiet_hours_start', models.TimeField(blank=True, null=True)),
                ('quiet_hours_end', models.TimeField(blank=True, null=True)),
                ('overnight_guests_allowed', models.BooleanField(default=True)),
                ('max_consecutive_guest_nights', models.IntegerField(default=3)),
                ('guest_notification_required', models.BooleanField(default=True)),
                ('cleaning_schedule', models.TextField(blank=True)),
                ('shared_chores_rotation', models.BooleanField(default=True)),
                ('smoking_allowed', models.BooleanField(default=False)),
                ('pets_allowed', models.BooleanField(default=False)),
                ('alcohol_allowed', models.BooleanField(default=True)),
                ('custom_rules', models.TextField(blank=True, help_text='Additional house rules')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('living_space', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='house_rules', to='coliving.livingspace')),
            ],
            options={
                'verbose_name': 'House Rules',
                'verbose_name_plural': 'House Rules',
            },
        ),
        migrations.AddField(
            model_name='expense',
            name='living_space',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='coliving.livingspace'),
        ),
        migrations.CreateModel(
            name='LivingSpaceMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('member', 'Member'), ('guest', 'Guest')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('living_space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='coliving.livingspace')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_memberships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='livingspace',
            name='members',
            field=models.ManyToManyField(related_name='living_spaces', through='coliving.LivingSpaceMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('cleaning', 'Cleaning'), ('maintenance', 'Maintenance'), ('groceries', 'Groceries'), ('bills', 'Bills'), ('other', 'Other')], default='other', max_length=20)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('recurrence', models.CharField(choices=[('none', 'One-time'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='none', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('overdue', 'Overdue')], default='pending', max_length=20)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('living_space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='coliving.livingspace')),
            ],
            options={
                'ordering': ['due_date', 'created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['living_space', 'expense_date'], name='coliving_ex_living__5f87d2_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['paid_by', 'expense_date'], name='coliving_ex_paid_by_17656a_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['category'], name='coliving_ex_categor_ccf1d0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='livingspacemember',
            unique_together={('living_space', 'user')},
        ),
        migrations.AddIndex(
            model_name='livingspace',
            index=models.Index(fields=['created_by'], name='coliving_li_created_94ef43_idx'),
        ),
        migrations.AddIndex(
            model_name='livingspace',
            index=models.Index(fields=['is_active'], name='coliving_li_is_acti_91fc6a_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['living_space', 'status'], name='coliving_ta_living__8b8a8f_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['assigned_to', 'status'], name='coliving_ta_assigne_266a75_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['due_date'], name='coliving_ta_due_dat_61bf64_idx'),
        ),
    ]
